@import Main._
@import scalatex.site._

@raw("""<script async src="https://www.googletagmanager.com/gtag/js?id=UA-116165806-1"></script>""")

@script
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'UA-116165806-1');

@a(
  href:="https://github.com/scalalandio/enumz",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png",
    alt:="Fork me on GitHub"
  )
)

@sect("Enumz", "One enum type class to rule them all")
  @sect{What Enumz does}
    @p
      In Scala you might meet many different implementations of enums:
    @ul
      @li
        build-in @code{scala.Enumeration},
      @li
        sum-type based sealed hierarchies,
      @li
        @code{enumeratum} as the previous one on steroids,
      @li
        Java's `enum` type which use static methods and has no companion object.
      @li
        filters for select, update and delete queries
    @p
      You are in control of what implementation @i{you} pick, but you have no control over
      what @i{other people} use. So if you had to use APIs using many different
      implementations how would you handle common code?
    @p
      With a type class.

  @sect{Usage}
    @p
      Add to your sbt (2.11 and 2.12 supported):
    @hl.scala
      libraryDependencies += "io.scalaland" %% "enumz" % "0.1.2"
    @p
      or, if you use Scala.js
    @hl.scala
      libraryDependencies += "io.scalaland" %%% "enumz" % "0.1.2"
    @p
      From now on you can define enums whatever you want and use one common interface
      for all of them.
    @hl.as
      public enum TestJavaEnum {
          A, B, C
      }
    @hl.scala
      object TestEnumeration extends Enumeration {
        type TestEnumeration = Value
        val A, B, C = Value
      }
    @hl.scala
      sealed trait TestSumType extends Product with Serializable
      object TestSumType {
        case object A extends TestSumType
        case object B extends TestSumType
        case object C extends TestSumType
      }
    @hl.scala
      import enumeratum.{Enum => EnumeratumEnum, _}

      sealed trait TestEnumeratum extends EnumEntry
      object TestEnumeratum extends EnumeratumEnum[TestEnumeratum] {
        val values = findValues
        case object A extends TestEnumeratum
        case object B extends TestEnumeratum
        case object C extends TestEnumeratum
      }
    @hl.scala
      import io.scalaland.enumz.Enum

      Enum[TestJavaEnum].values
      Enum[TestEnumeration.TestEnumeration].values
      Enum[TestSumType].values
      Enum[TestEnumeratum].values
    @p
      You can also test it with ammonite like:
    @hl.scala
      import $ivy.`io.scalaland::enumz:0.1.2`, io.scalaland.enumz.Enum

      {
      sealed trait TestSumType extends Product with Serializable
      object TestSumType {
        case object A extends TestSumType
        case object B extends TestSumType
        case object C extends TestSumType
      }
      }

      Enum[TestSumType].values

  @sect{Available methods}
    @hl.scala
      Enum[TestSumType].values // Vector(TestSumType.A, TestSumType.B, TestSumType.C)
      Enum[TestSumType].indices // Map(TestSumType.A -> 0, TestSumType.B -> 1, TestSumType.C -> 2)

      Enum[TestSumType].getName(TestSumType.A) // "A"
      Enum[TestSumType].getIndex(TestSumType.A) // 0

      Enum[TestSumType].withIndexOption(0) // Some(TestSumType.A)
      Enum[TestSumType].withIndexOption(-1) // None

      Enum[TestSumType].withIndex(0) // TestSumType.A
      Enum[TestSumType].withIndex(-1) // throws!

      Enum[TestSumType].withNameOption("A") // Some(TestSumType.A)
      Enum[TestSumType].withNameOption("") // None

      Enum[TestSumType].withName("A") // TestSumType.A
      Enum[TestSumType].withName("") // throws!

      Enum[TestSumType].withNameInsensitiveOption("a") // Some(TestSumType.A)
      Enum[TestSumType].withNameInsensitiveOption("") // None

      Enum[TestSumType].withNameInsensitive("a") // TestSumType.A
      Enum[TestSumType].withNameInsensitive("") // throws!

      Enum[TestSumType].`A` // TestSumType.A
